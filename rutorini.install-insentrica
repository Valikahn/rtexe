#!/bin/bash
clear

# VERSION CONTROL
SCRIPTVERSION='v0.9.1-beta'
REVDATE='Sunday 31 October 2021'
GITHUB='https://github.com/Valikahn/rutorrent-auto'

# Checking if user is root.
###
if [ "$(id -u)" != "0" ]; then
	echo
	echo "This script must be run as root." 1>&2
	echo
	exit 1
fi

# Server IP Address - Ipv4 only
###
	# grep 'inet6' instead of 'inet ' for ipv6
	ip=$(ip addr | grep 'inet ' | awk '{print $2}' | cut -d/ -f1 | grep -v "127." | head -n 1)

# Server Version
###
	# Server version variable
	OS=$(awk '/DISTRIB_ID=/' /etc/*-release | sed 's/DISTRIB_ID=//' | tr '[:upper:]' '[:lower:]')
	ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
	VERSION=$(awk '/DISTRIB_RELEASE=/' /etc/*-release | sed 's/DISTRIB_RELEASE=//' | sed 's/[.]0/./')

	if [ -z "$OS" ]; then
    OS=$(awk '{print $1}' /etc/*-release | tr '[:upper:]' '[:lower:]')
	fi

	if [ -z "$VERSION" ]; then
    VERSION=$(awk '{print $3}' /etc/*-release)
	fi

# Set Variables
###
export logfile="/dev/null"
unixpass=""
webpass=''
passflag=0
os_repo=0
major_repo=0
homedir=$(cat /etc/passwd | grep "$user": | cut -d: -f6)
home=$(eval echo "~$user")
rt_url="https://rakshasa.github.io/rtorrent/"
xmlrpc_url="https://svn.code.sf.net/p/xmlrpc-c/code/advanced/"
ru_url="https://github.com/Novik/ruTorrent/"
adl_url="https://github.com/autodl-community/"

# Brief info on script
###
echo "Valikahn's rutorrent-auto-install script. Version $SCRIPTVERSION released $REVDATE"
echo
echo "Remember to run as root or with sudo."
echo
echo "Bugs, feature requests? Visit $GITHUB"
echo
echo "-------------------------------------------------------------------------------------------"
echo

#######################
###  SET FUNCTIONS  ###
#######################

# Are the sites up or down where we get our packages from?
###
up_or_down() {
  if [[ `wget -S -T 3 --spider $1  2>&1 | grep 'HTTP/1.1 200 OK'` ]]; then return 0; else return 1; fi
}

# Function to check if user name is a valid UNIX.
###
valid_name(){
    until [[ $user =~ ^[a-z][-a-z0-9_]{2,31}$ ]]
      do
        echo "Enter user name (lowercase, numbers, dash and underscore):"
        read user
      done
}

# Random password generator function
###
passgen() {
	local genln=$1
	[ -z "$genln" ] && genln=8
	tr -dc A-Za-z0-9 < /dev/urandom | head -c ${genln} | xargs
	}

#function to set a user input password
set_pass() {
local authpass
local bailoutval=0
local passcheck
local passcheckagain

exec 3>&1 >/dev/tty

echo "Enter a password (6+ chars)"
echo "or leave blank to generate a random one"

while [ -z $authpass ]
do
  echo "Please enter the new password:"
  stty -echo
  read passcheck
  stty echo

# check that password is valid
  if [ -z $passcheck ]; then
    echo "Random password generated, will be provided to user at end of script"
    bailoutval=1
    authpass=$(passgen)
  elif [ ${#passcheck} -lt 6 ]; then
    echo "password needs to be at least 6 chars long" && continue
  else
    echo "Enter the new password again:"
    stty -echo
    read passcheckagain
    stty echo

# Check both passwords match
    if [ $passcheck != $passcheckagain ]; then
      echo "Passwords do not match"
    else
      authpass=$passcheck
    fi
  fi
done

exec >&3-
echo $authpass
return $bailoutval
}

#function to determine random number between 2 numbers
random()
{
    local min=$1
    local max=$2
    local RAND=`od -t uI -N 4 /dev/urandom | awk '{print $2}'`
    RAND=$((RAND%((($max-$min)+1))+$min))
    echo $RAND
}

# function to ask user for y/n response
ask_user(){
local answer
while true
  do
    read answer
    case $answer in [Yy]* ) return 0 ;;
                    [Nn]* ) return 1 ;;
                        * ) echo "Enter y or n";;
    esac
  done
}

# function to enter IP address
enter_ip() {
local ip=$1

exec 3>&1 >/dev/tty

while true
  do
    if valid_ip $ip ; then
      echo "Your Server IP is $ip"
      echo -n "Is this correct y/n? "
      ask_user && break
    else
      echo "Invalid IP address, please try again"
    fi

    echo "enter your server's IP address"
    echo "e.g. 213.0.113.113"
    read ip
  done

exec >&3-

echo $ip
}


#################################
###  USER INFORMATION GATHER  ###
#################################

# set and prepare user
if [ -z "$user" ]; then
  if [ "$SUDO_USER" = "root" ] || [ -z "$SUDO_USER" ]; then
    echo "Please enter the name of the user account you would like to use."
	echo "This is where the program will install everything to."
    echo "This will be your primary user, this can be an existing user or a new user."
    echo
    auth_act=1
    while [ $auth_act = 1 ]
      do
        valid_name
        echo "You have entered $user as your chosen username."
		echo "Please confirm if this is corect y/n?"
        if ask_user; then
          auth_act=0
        else
          user=''
        fi
      done
  else
    user=$SUDO_USER
  fi
else
  if ! [[ $user =~ ^[a-z][-a-z0-9_]{2,31}$ ]]; then
    echo "$user is not a valid user name please enter again"
    auth_act=1
    while [ $auth_act = 1 ]
      do
        valid_name
        echo -n "You have entered $user as your chosen username."
		echo -n "Please confirm if this is corect y/n?"
        if ask_user; then
          auth_act=0
        else
          user=''
        fi
      done
  fi
fi

echo "User name is now set to:  $user"

if id -u $user >/dev/null 2>&1; then
  echo "$user already exists"
else
  if [ -z "$unixpass" ]; then
    adduser --gecos "" $user
  else
    adduser --gecos "" $user --disabled-password
    echo "$user:$unixpass" | chpasswd
  fi

  if id -u $user >/dev/null 2>&1; then
    echo "$user successfully created"
  else
    echo "create user failed - exiting process"
    exit 1
  fi

fi

#set password for rutorrent
#if [ -z "$webpass" ] && [ $forceyes = 0 ]; then
#  if [ -z $(grep -s $user $passfile) ]; then
#    webpass=$(passgen)
#    passflag=1
#  else
#    passflag=2
#  fi
#fi
#
#if [ -z "$webpass" ]  && [ $passflag != 2 ]; then
#  if [ ! -z $(grep -s $user $passfile) ]; then
#    echo "There is an existing RuTorrent password for $user"
#    echo -n "Use existing password y/n ? "
#    if ask_user; then
#      passflag=2
#    fi
#  fi
#  
#  if [ $passflag != 2 ]; then
#    echo "Set Password for RuTorrent web client"
#    webpass=$(set_pass)
#    passflag=$?
#  fi
#fi

rut_user_list=$(ls /var/www/rutorrent/conf/users 2>/dev/null | sed "s/$user//g")

for rut_user in $rut_user_list; do
  if ! id -u $rut_user >/dev/null 2>&1; then
    rut_user_list=$(echo $rut_user_list | sed "s/$rut_user//g")
  fi
done

if [ -z "$rut_user_list" ]; then
  echo "No additional users to add"
else
  echo "These users have been detected:"
  for rut_user in $rut_user_list; do
    echo $rut_user
  done

  if [ $forceyes = 0 ]; then
    echo "Users will be added"
    rut_add_users=0
  else
    echo -n "Add them to rutorrent y/n ? "
    if ask_user; then
      rut_add_users=0
    fi
  fi
fi

# check required web repos are accessible
sed  -i "s/\/debian\s/\/debian\/ /g" /etc/apt/sources.list

echo
echo  "Checking $OS mirrors"
for i in $(cat /etc/apt/sources.list | grep "^deb http" | cut -d' ' -f2 | uniq ); do
  echo -n $i": "
  up_or_down $i && echo "OK" || { echo "FAIL"; os_repo=1; }
done

echo
echo "Checking major 3rd party components"
echo -n "Rtorrent: "; up_or_down $rt_url && echo "OK" || { echo "FAIL"; major_repo=1; }

echo -n "xmlrpc-c: "; up_or_down $xmlrpc_url && echo "OK" ||  xmlrpc_repo=1

if [[ $xmlrpc_repo = 1 ]]; then
  xmlrpc_url=$xmlrpc_url_alt
  up_or_down $xmlrpc_url && echo "OK" || { echo "FAIL"; major_repo=1; }
fi

echo -n "RuTorrent: ";up_or_down $ru_url && echo "OK" || { echo "FAIL"; major_repo=1; }
echo -n "Autodl-irssi: "; up_or_down $adl_url && echo "OK" || { echo "FAIL"; major_repo=1; }

if [ $os_repo = 1 ]; then
  echo "Some of the $OS mirrors are down, try again later"
  exit 1
fi

if [ $major_repo = 1 ]; then
  echo "Some of the repositories we need are not currently available."
  echo "We will continue for now, but may not be able to finish"
  echo "You can rerun rtinst later to complete the installation if needed"
fi
echo

#######################
### BACKGROUND WORK ###
#######################

#################################################################

# Lets get started
###
echo "OK, Lets get started there is no going back after this stage."
echo "Are you happy to proceed? [y,n]"
read val

# did we get an input value?
if [ "$val" == "" ]; then
	clear
	echo "Invalid entry by user...Terminating program..."
	sleep 5
	
# was it a y or a yes?
elif [[ "$val" == "y" ]] || [[ "$val" == "yes" ]]; then

###########  REPASTE BACK IN HERE  ###########
	
	clear
	echo -n "Please pick your Operating System version: "
	echo
		echo "1)  Ubuntu 18.04 (Bionic Beaver)"
		echo "2)  Ubuntu 20.04 (Focal Fossa)"
		echo "3)  Ubuntu 21.04 (Hirsute Hippo)"
		echo "4)  Ubuntu 21.10 (Impish Indri)"
		echo "5)  Operating System Version Not Listed"
		echo
	read OSVERSION
	echo

	echo -n "You have chosen your Operating System version as option: $OSVERSION"
	echo
	case $OSVERSION in

	  1)
		echo -n "Ubuntu 18.04 (Bionic Beaver)"
		echo
		source ins/ins-pack-1804.sh
		echo
		echo "Done!"
		;;

	  2)
		echo -n "Ubuntu 20.04 (Focal Fossa)"
		echo
		;;

	  3)
		echo -n "Ubuntu 21.04 (Hirsute Hippo)"
		echo
		;;
		
	  4)
		echo -n "Ubuntu 21.10 (Impish Indri)"
		echo
		;;

	  5)
		echo -n "Operating System Version Not Listed"
		echo
		;;
		
	  *)
		echo -n "Unknown Operating System"
		echo
		;;
	esac
	
fi
